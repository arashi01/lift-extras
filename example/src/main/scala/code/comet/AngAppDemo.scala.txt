package code
package comet

import scala.xml._

import net.liftweb._
import actor._
import common._
import http._
import js._
import js.JE._
import js.JsCmds._
import json._
import json.JsonDSL._
import util._
import Helpers._

import net.liftmodules.extras._

case class ClientEvent(id: String, json: JValue)
case class ServerEvent(id: String, json: JValue)

class AngAppDemo extends CometActor with SnippetHelper {

  implicit val formats = DefaultFormats

  private val ngModule = NgModule("AngDemo")
  private val ngController = NgModule("angular-demo")

  override def lowPriority = {
    case ServerEvent(id, json) =>  partialUpdate(ngModule.broadcast(id, Full(json)))
  }

  def render = {
    def sendEvent(json: JValue): JsCmd = {
      for {
        msg <- tryo(json.extract[ClientEvent])
      } yield {
        val logMsg = "textInput from client: "+msg
        S.notice(logMsg)
        ngController.broadcast("reset-form")
      }
    }

    val params: JValue = JNothing
    val funcs = JsObj(
      "sendEvent" -> JsExtras.JsonCallbackAnonFunc(sendEvent)
    )

    new RenderOut(<tail>{Script(JsExtras.IIFE(ngModule.init(params, funcs)))}</tail>)
  }
}

class AngAppDemoServer extends LiftActor {
  protected def messageHandler = {
    case ClientEvent(id, json) => id match {
      case "save.form" =>
      case "send.success" =>
    }
  }
}
